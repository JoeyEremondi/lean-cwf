
import CwF.Fam
import CwF.Util
import CwF.Sigma
import CwF.CwFProperties
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.NatTrans
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Elements
import Mathlib.Data.Opposite
import Mathlib.CategoryTheory.Types



import CwF.CwF

open CategoryTheory

-- Pi type structure in a category with families


universe u v u‚ÇÇ
variable {C : Type u} [CCat : Category.{v}  C]

-- abbrev PShC : Type _ :=
--   C·µí·µñ ‚•§ Type u‚ÇÇ

-- def PshCat : Category.{max u u‚ÇÇ,max u v (u‚ÇÇ + 1)} PShC  :=
--   @Functor.category (C·µí·µñ) _ (Type u‚ÇÇ) _

-- A type is a presheaf over the elements of Œì
def pshTy  (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) : Type (max u v (u‚ÇÇ + 1)) :=
  Functor.Elements Œì ‚•§ Type u‚ÇÇ

-- A term is a mapping from stages and its context's elements at that stage
-- to the type's elements at that stage and element
def pshTm  (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) (T : pshTy Œì) : Type (max u v (u‚ÇÇ + 1)) :=
  (i : C·µí·µñ) -> (œÅ : Œì.obj i) -> ULift.{max u v (u‚ÇÇ + 1)} (T.obj ‚ü®i , œÅ‚ü©)

def pshTySub {Œì Œî : C·µí·µñ ‚•§ Type u‚ÇÇ} (Œ∏ : Œî ‚ü∂ Œì) (T : pshTy Œì) : pshTy Œî :=
  (CategoryOfElements.map Œ∏) ‚ãô T

def pshTmSub {Œì Œî : C·µí·µñ ‚•§ Type u‚ÇÇ} (Œ∏ : Œî ‚ü∂ Œì) (T : pshTy Œì) (t : pshTm Œì T) :
  pshTm Œî (pshTySub Œ∏ T) := (fun i => fun Œ¥ =>
    t i (Œ∏.app i Œ¥))


abbrev pshTmTyFunctor : (C·µí·µñ ‚•§ Type u‚ÇÇ)·µí·µñ ‚•§ Fam where
  obj
  | ‚ü® Œì ‚ü© => mkFam
    (pshTy Œì)
    (pshTm Œì)

  map := @fun ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü® Œ∏ ‚ü©  =>
    unmapFam
      (pshTySub Œ∏)
      (@fun T x => by
        simp_all [ixSet, mkFam]
        simp [famFor, mkFam] at x
        let y := x.val
        let z := y.snd
        simp [x.property] at z
        let ret := pshTmSub Œ∏ T
        simp [famFor]
        simp at ret
        let retz := ret z
        fconstructor <;> try fconstructor <;> try aesop_cat
        . exact retz
        )



instance pshTmTy: TmTy (C·µí·µñ ‚•§ Type u‚ÇÇ)  where
  F := pshTmTyFunctor


def pshTyMap {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} (T : Ty Œì) {k1 k2 : C·µí·µñ}
  (Œ∏ : k1 ‚ü∂ k2) (Œ≥ : Œì.obj k1) : T.obj ‚ü®k1 , Œ≥‚ü© -> T.obj ‚ü®k2, Œì.map Œ∏ Œ≥‚ü© :=
  T.map (X := ‚ü®k1, Œ≥‚ü©) (Y := ‚ü®k2 , Œì.map Œ∏ Œ≥‚ü©) ‚ü®Œ∏ , rfl‚ü©

theorem pshTyMapId {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} (T : Ty Œì) {k : C·µí·µñ} {Œ≥ : Œì.obj k}
  : HEq (pshTyMap T (ùüô k) Œ≥) (id : T.obj ‚ü®k, Œ≥‚ü© -> T.obj ‚ü®k,Œ≥‚ü©)  := by
    let Tlem := T.map_id ‚ü®k, Œ≥‚ü©
    fapply heq_of_heq_of_eq _ Tlem
    rw [pshTyMap]
    congr <;> try aesop_cat


theorem pshTyMapComp {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} (T : Ty Œì) {k1 k2 k3 : C·µí·µñ} {Œ≥ : Œì.obj k1}
  (f : k1 ‚ü∂ k2 ) (g : k2 ‚ü∂ k3)
  : HEq (pshTyMap T (f ‚â´ g) Œ≥) ((pshTyMap T g _) ‚àò (pshTyMap T f Œ≥)) := by
    let Tlem :=
      T.map_comp (X := ‚ü®k1 , Œ≥‚ü©) (Y := ‚ü®k2 , Œì.map f Œ≥‚ü©) (Z := ‚ü®k3, Œì.map g (Œì.map f Œ≥)‚ü©) ‚ü®f , rfl‚ü© ‚ü®g , rfl‚ü©
    fapply heq_of_heq_of_eq _ Tlem
    rw [pshTyMap]
    congr <;> try aesop_cat

def pshTyMapEq {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
  (f g : k1 ‚ü∂ k2) (Œ≥ : Œì.obj k1)
  (eq1 : f = g) (eq2 : Œ≥1 = Œ≥2)
  : HEq (pshTyMap (T := T) f Œ≥) (pshTyMap (T := T) g Œ≥) := by
    fapply hFunExt <;> try aesop_cat


abbrev pshSnocObj (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) (T : Ty Œì) (k : C·µí·µñ) :  Type u‚ÇÇ :=
  (Œ≥ : Œì.obj k) √ó (T.obj ‚ü®k,Œ≥‚ü©)


-- Helps with stupid HEq stuff
-- abbrev pshSnocMapSnd  {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
--   (Œ∏ : k1 ‚ü∂ k2) (Œ≥œÑ : pshSnocObj Œì T k1) (f : Œì.obj k1 -> Œì.obj k2)
--   (eq : Œì.map Œ∏ Œ≥œÑ.fst = f Œ≥œÑ.fst) :
--   T.obj ‚ü®k2 , f Œ≥œÑ.fst‚ü© := cast (by aesop) (pshTyMap T Œ∏ Œ≥œÑ.fst Œ≥œÑ.snd)

-- theorem pshSnocMapSndId {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k : C·µí·µñ}
--   (Œ≥œÑ : pshSnocObj Œì T k) {f : Œì.obj k -> Œì.obj k} {eq : Œì.map (ùüô k) Œ≥œÑ.fst = f Œ≥œÑ.fst}
--   : HEq (pshSnocMapSnd (ùüô k) Œ≥œÑ f eq)  Œ≥œÑ.snd := by
--     simp only [pshSnocMapSnd]
--     let helper : HEq (pshSnocMapSnd (ùüô k) Œ≥œÑ f eq)  (T.map (ùüô ‚ü®k,Œ≥œÑ.fst‚ü©)) := by
--       fapply congrArg T.map
--       fapply Subtype.eq
--       rfl
--     fapply heq_of_eq_of_heq -- (congrFun helper Œ≥œÑ.snd)
--     . simp
--     fapply congrFun (T.map_id _) _

abbrev pshSnocMap {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
  (Œ∏ : k1 ‚ü∂ k2) (Œ≥œÑ : pshSnocObj Œì T k1) : pshSnocObj Œì T k2 :=
      ‚ü® Œì.map Œ∏ Œ≥œÑ.fst
      , pshTyMap T Œ∏ Œ≥œÑ.fst Œ≥œÑ.snd
      ‚ü©

-- theorem pshSnocMapExt {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
--   (f g : pshSnocObj Œì T k1 -> pshSnocObj Œì T k2)
--   (eq1 : (fun x => (f x).1) = (fun x => (g x).1))
--   (eq2 : HEq (fun x => (f x).2) (fun x => (g x).2))
--   : f = g :=  by
--     funext x
--     simp [pshSnocObj] at x
--     match x with
--     | Sigma.mk Œ≥ œÑ =>
--       fapply Sigma.ext
--       . apply (congrFun eq1 ‚ü®Œ≥ , œÑ‚ü©)
--       . let x :=  hCong

-- theorem pshSnocMapId {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k : C·µí·µñ}
--   (Œ≥œÑ : pshSnocObj Œì T k)
--   : pshSnocMap (ùüô k) Œ≥œÑ = Œ≥œÑ := by
--   fapply Sigma.ext <;> try aesop_cat
--   dsimp only [ pshSnocMap ]
--   simp_rw [Œì.map_id k]
--   fapply heq_of_eq_of_heq (pshSnocMapSndId )
--   aesop_cat


def pshCwF : CwF (C·µí·µñ ‚•§ Type u‚ÇÇ) where
  empty := Limits.terminal _

  emptyUnique := Limits.uniqueToTerminal

  snoc Œì T := {
    obj := pshSnocObj Œì T
    map := pshSnocMap
    map_id := fun k => by
      funext Œ≥œÑ
      simp at Œ≥œÑ
      cases Œ≥œÑ with
      | mk Œ≥ œÑ =>
        fapply Sigma.ext <;> try simp
        apply hCongFun (f := pshTyMap T (ùüô k) Œ≥) (g := fun x => x) œÑ
        . aesop_cat
        . fapply HEq.trans (pshTyMapId T) <;> aesop

    map_comp := @fun k1 k2 k3 f g => by
      funext Œ≥œÑ
      simp at Œ≥œÑ
      cases Œ≥œÑ with
      | mk Œ≥ œÑ =>
        fapply Sigma.ext <;> try simp
        apply hCongFun œÑ
        . aesop_cat
        . fapply HEq.trans (pshTyMapComp T f g) <;> aesop
  }

  -- p :=
  --   ‚ü® fun k => by  reduce
  --   , fun k => by simp    ‚ü©

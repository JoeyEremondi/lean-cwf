
import CwF.Fam
import CwF.Sigma
import CwF.CwFProperties
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.NatTrans
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Elements
import Mathlib.Data.Opposite
import Mathlib.CategoryTheory.Types



import CwF.CwF

open CategoryTheory

-- Pi type structure in a category with families


universe u v u‚ÇÇ
variable {C : Type u} [CCat : Category.{v}  C]

-- abbrev PShC : Type _ :=
--   C·µí·µñ ‚•§ Type u‚ÇÇ

-- def PshCat : Category.{max u u‚ÇÇ,max u v (u‚ÇÇ + 1)} PShC  :=
--   @Functor.category (C·µí·µñ) _ (Type u‚ÇÇ) _

-- A type is a presheaf over the elements of Œì
def pshTy  (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) : Type (max u v (u‚ÇÇ + 1)) :=
  Functor.Elements Œì ‚•§ Type u‚ÇÇ

-- A term is a mapping from stages and its context's elements at that stage
-- to the type's elements at that stage and element
def pshTm  (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) (T : pshTy Œì) : Type (max u v (u‚ÇÇ + 1)) :=
  (i : C·µí·µñ) -> (œÅ : Œì.obj i) -> ULift.{max u v (u‚ÇÇ + 1)} (T.obj ‚ü®i , œÅ‚ü©)

def pshTySub {Œì Œî : C·µí·µñ ‚•§ Type u‚ÇÇ} (Œ∏ : Œî ‚ü∂ Œì) (T : pshTy Œì) : pshTy Œî :=
  (CategoryOfElements.map Œ∏) ‚ãô T

def pshTmSub {Œì Œî : C·µí·µñ ‚•§ Type u‚ÇÇ} (Œ∏ : Œî ‚ü∂ Œì) (T : pshTy Œì) (t : pshTm Œì T) :
  pshTm Œî (pshTySub Œ∏ T) := (fun i => fun Œ¥ =>
    t i (Œ∏.app i Œ¥))



abbrev pshTmTyFunctor : (C·µí·µñ ‚•§ Type u‚ÇÇ)·µí·µñ ‚•§ Fam where
  obj
  | ‚ü® Œì ‚ü© => mkFam
    (pshTy Œì)
    (pshTm Œì)

  map := @fun ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü® Œ∏ ‚ü©  =>
    unmapFam
      (pshTySub Œ∏)
      (@fun T x => by
        simp_all [ixSet, mkFam]
        simp [famFor, mkFam] at x
        let y := x.val
        let z := y.snd
        simp [x.property] at z
        let ret := pshTmSub Œ∏ T
        simp [famFor]
        simp at ret
        let retz := ret z
        fconstructor <;> try fconstructor <;> try aesop_cat
        . exact retz
        )

instance pshTmTy: TmTy (C·µí·µñ ‚•§ Type u‚ÇÇ)  where
  F := pshTmTyFunctor

abbrev pshSnocObj (Œì : C·µí·µñ ‚•§ Type u‚ÇÇ) (T : Ty Œì) (k : C·µí·µñ) :  Type u‚ÇÇ :=
  (Œ≥ : Œì.obj k) √ó (T.obj ‚ü®k,Œ≥‚ü©)


-- Helps with stupid HEq stuff
abbrev pshSnocMapSnd  {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
  (Œ∏ : k1 ‚ü∂ k2) (Œ≥œÑ : pshSnocObj Œì T k1) (f : Œì.obj k1 -> Œì.obj k2)
  (eq : Œì.map Œ∏ Œ≥œÑ.fst = f Œ≥œÑ.fst) :
  T.obj ‚ü®k2 , f Œ≥œÑ.fst‚ü© := T.map (X := ‚ü®k1 , _‚ü©) (Y := ‚ü®k2, _‚ü©) ‚ü®Œ∏ , eq‚ü© Œ≥œÑ.snd

theorem pshSnocMapSndId {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k : C·µí·µñ}
  (Œ≥œÑ : pshSnocObj Œì T k) {eq : _}
  : pshSnocMapSnd (ùüô k) Œ≥œÑ id eq = Œ≥œÑ.snd := by
    simp only [pshSnocMapSnd]
    let helper : T.map (X := ‚ü®k , _‚ü©) (Y := ‚ü®k, _‚ü©) ‚ü®ùüô k , eq‚ü©  = T.map (ùüô ‚ü®k,Œ≥œÑ.fst‚ü©) := by
      fapply congrArg T.map
      fapply Subtype.eq
      rfl
    fapply Eq.trans (congrFun helper Œ≥œÑ.snd)
    fapply congrFun (T.map_id _) _

abbrev pshSnocMap {Œì : C·µí·µñ ‚•§ Type u‚ÇÇ} {T : Ty Œì} {k1 k2 : C·µí·µñ}
  (Œ∏ : k1 ‚ü∂ k2) (Œ≥œÑ : pshSnocObj Œì T k1) : pshSnocObj Œì T k2 :=
      ‚ü® Œì.map Œ∏ Œ≥œÑ.fst
      , pshSnocMapSnd Œ∏ Œ≥œÑ (Œì.map Œ∏) rfl
      ‚ü©



-- def pshCwF : CwF (C·µí·µñ ‚•§ Type u‚ÇÇ) where
--   empty := Limits.terminal _

--   emptyUnique := Limits.uniqueToTerminal

--   snoc Œì T := {
--     obj := pshSnocObj Œì T
--     map := pshSnocMap
--     map_id := fun k => by
--       funext Œ≥œÑ
--       simp at Œ≥œÑ
--       simp only
--       let helper : pshSnocMap (ùüô k) Œ≥œÑ  = ‚ü®Œ≥œÑ.fst , (T.map (X := ‚ü®k , _‚ü©) (Y := ‚ü®k , _‚ü©)  (‚ü®ùüô k , by aesop‚ü©) Œ≥œÑ.snd) ‚ü©
--         := by
--           dsimp only [pshSnocMap]
--           fapply Eq.refl
--       let eq := congrFun (Œì.map_id k) _
--       simp [Œì.map_id k]
--       dsimp
--       reduce
--     -- by
--     --   funext Œ≥œÑ
--     --   cases Œ≥œÑ with
--     --   | mk Œ≥ œÑ =>
--     --     fapply Sigma.ext
--     --     . aesop_cat
--     --     . let Teq := (T.map_id ‚ü®k, Œ≥‚ü©)
--     --       simp only at Teq
--     --       simp
--     --       fapply hCong (x := œÑ) (y := œÑ) (g := id)



--   }

--   -- p :=
--   --   ‚ü® fun k => by  reduce
--   --   , fun k => by simp    ‚ü©
